name: CI

on:
  push:
    branches: 'master'
  pull_request:
    branches: '*'
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install node
      uses: actions/setup-node@v1
      with:
       node-version: '12.x'
    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'
        architecture: 'x64'

    - name: Setup pip cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: pip-3.7-${{ hashFiles('package.json') }}
        restore-keys: |
          pip-3.7-
          pip-

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Setup yarn cache
      uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          yarn-

    - name: Install dependencies
      run: |
        python -m pip install jupyterlab~=3.0 cookiecutter jupyter_packaging~=0.7.9

    - name: Create pure frontend extension
      run: |
        cookiecutter . --no-input
        cd myextension
        jlpm install && jlpm run eslint:check
        pip install -e .
        jupyter labextension 2>&1 | grep -ie "myextension.*OK"
        python -m jupyterlab.browser_check
        jlpm run install:extension
        jupyter labextension build .

        jupyter labextension uninstall myextension
        pip uninstall -y myextension jupyterlab

    - name: Create server extension pip install
      run: |
        # Trick to use custom parameters
        python -c "from cookiecutter.main import cookiecutter; import json; f = open('cookiecutter_with_server.json'); cookiecutter('.', extra_context=json.load(f), no_input=True); f.close()"
        pip install ./my_extension
        jupyter server extension list 2>&1 | grep -ie "my_extension.*OK"
        jupyter labextension list 2>&1 | grep -ie "my_lab_extension.*OK"
        python -m jupyterlab.browser_check

        pip uninstall -y my_extension jupyterlab
        rm -rf my_extension

    - name: Create server extension pip develop
      run: |
        # Trick to use custom parameters
        python -c "from cookiecutter.main import cookiecutter; import json; f = open('cookiecutter_with_server.json'); cookiecutter('.', extra_context=json.load(f), no_input=True); f.close()"
        pushd my_extension
        pip install -e .
        jupyter server extension list 2>&1 | grep -ie "my_extension.*OK"
        jupyter labextension list 2>&1 | grep -ie "my_lab_extension.*OK"
        python -m jupyterlab.browser_check

        jupyter labextension develop . --overwrite
        jupyter labextension build .

        jupyter labextension uninstall my_lab_extension
        pip uninstall -y my_extension jupyterlab
        popd
        rm -rf my_extension

    - name: Install server extension from a tarball
      run: |
        # Trick to use custom parameters
        python -c "from cookiecutter.main import cookiecutter; import json; f = open('cookiecutter_with_server.json'); cookiecutter('.', extra_context=json.load(f), no_input=True); f.close()"
        pushd my_extension
        pip install --pre jupyter_packaging jupyterlab
        python setup.py sdist
        pip install dist/*.tar.gz
        jupyter labextension list 2>&1 | grep -ie "my_lab_extension.*OK"
        jupyter server extension list 2>&1 | grep -ie "my_extension.*OK"
        python -m jupyterlab.browser_check

        pip uninstall -y my_extension jupyterlab
        popd
        rm -rf my_extension
